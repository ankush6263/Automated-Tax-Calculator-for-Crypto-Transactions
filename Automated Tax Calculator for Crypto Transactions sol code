// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract CryptoTaxCalculator {
    address public owner;
    uint256 public taxRate; // tax rate in basis points (e.g., 500 = 5%)

    event TaxCalculated(address indexed user, uint256 transactionAmount, uint256 taxAmount);

    constructor(uint256 _taxRate) {
        owner = msg.sender;
        taxRate = _taxRate; // e.g., 500 for 5%
    }

    function calculateTax(uint256 amount) public view returns (uint256) {
        require(amount > 0, "Amount must be greater than zero");
        return (amount * taxRate) / 10000;
    }

    function updateTaxRate(uint256 newRate) external {
        require(msg.sender == owner, "Only owner can update the tax rate");
        taxRate = newRate;
    }

    function simulateTransaction(uint256 amount) external returns (uint256) {
        uint256 taxAmount = calculateTax(amount);
        emit TaxCalculated(msg.sender, amount, taxAmount);
        return taxAmount;
    }
}
